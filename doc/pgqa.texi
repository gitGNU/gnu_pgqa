\input texinfo @c -*- mode: texinfo; coding: utf-8 -*-
@c documentation for PGQA
@c Written by Anton√≠n Houska

@setfilename pgqa.info
@comment @include docstyle.texi
@settitle PGQA User's Manual

@copying
This file documents PGQA, PostgreSQL Query Analyzer.

Copyright @copyright{} 2017 Antonin Houska

@quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant Sections,
no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is
included in the section entitled "GNU Free Documentation License.
@end quotation
@end copying

@titlepage
@sp 10

@comment TODO version number
@center @titlefont{PGQA Mode}
@sp 2
@center GNU Emacs mode to parse, format and analyze SQL queries
@sp 2
@center Antonin Houska

@page
@vskip 0pt plus 1filll
@insertcopying

This manual was generated from pgqa.texi, which is distributed with PGQA, or
can be downloaded from @url{http://savannah.nongnu.org/projects/pgqa/}.
@end titlepage

@ifnottex
@node Top
@top PGQA

This file documents PGQA, PostgreSQL Query Analyzer.
@end ifnottex

@menu
* Introduction::
* Getting Started::
* Query Formatting::
@end menu

@node Introduction
@chapter Introduction

PGQA (PostgreSQL Query Analyzer) is a major mode of GNU Emacs editor, designed
to parse, format and analyze SQL queries for PostgreSQL database server.

@noindent
Besides providing the user with particular functionality (accessible via menu
and key sequences), the project aims to offer low-level functions to search in
the query tree and to modify it.


@node    Getting Started
@chapter Getting Started

First, make sure you have GNU Emacs 25 or later installed.

@noindent
Second, copy the pgqa directory to the directory you usually install Elisp
packages into, typically @file{~/.emacs.d/lisp/pgqa/"}.

@noindent
Then add the following lines to the init file of GNU Emacs (adjust
@var{load-path} value if you decided to installed the package to a different
directory):

@lisp
;; Make GNU Emacs aware of PGQA mode.
(add-to-list 'load-path "~/.emacs.d/lisp/pgqa/")

;; Enable autoloading of the PGQA mode.
(autoload 'pgqa-mode "pgqa" "PGQA major mode function." t)

;; Make sure *.sql file suffix activates the PGQA mode automatically.
(add-to-list 'auto-mode-alist (cons "\\.sql\\'" 'pgqa-mode))
@end lisp

@noindent
Finally restart the GNU Emacs editor. Once you open a file having @file{sql}
suffix, major mode of the containing buffer should automatically become the
PGQA mode.  If the file has different suffix, or if you don't want to modify
@var{auto-mode-alist}, you can use @kbd{M-x pgqa-mode} command to activate the
mode.

@noindent
Once the mode has been activated, "PGQA" string should appear in the mode
line.


@node    Query Formatting
@chapter Query Formatting

@menu
* Interactive Mode::
* Batch Mode::
@end menu

@node Interactive Mode
@section Interactive Mode

If the PGQA mode is active, @kbd{C-x <} key sequence runs command
@code{pgqa-format-query}, which considers the current buffer to contain a
single SQL query. The command parses the query string, turns the internal
format back into text and replaces the original query with it.

@noindent
The command tries not to change position of the query within the buffer. In
particular, the formatted query starts on the same line as the original
did. If the first character of the query does not start at the beginning of a
line, indentation of the whole query is adjusted so that the number of spaces
in front of each line of the query is whole multiple of
@code{tab-width}. (Spaces are added or removed so that the closest TAB
position is reached.)

@noindent
If the command is called with a prefix argument N, then N is considered the
desired TAB position and no estimate is calculated.

@noindent
If the current buffer contains some other text besides the SQL query that PGQA
parser does not recognize (for example the query is inside PL/pgSQL
procedure), or if the buffer contains multiple queries, user can mark the
query (i.e. put it into ``region''). Thus the @code{pgqa-format-query} command
only processes the region contents. Again, query position stays the same,
except for possible adjustment of the indentation.

@noindent
If the region is used and the first line is preceded by at least one
non-whitespace character, then the indentation is still estimated (or accepted
as a prefix argument), but it's not applied to the first line. The idea is
that user should know why the non-white character is there.

@noindent
@code{fill-column} variable is honored during the formatting.

@node Batch Mode
@section Batch Mode

PGQA can be used to format queries in batch mode. To ensure that the code gets
loaded, add the containing directory to the value of @env{EMACSLOADPATH}. For
example (the initial colon ensures that the existing value of @var{load-path}
variable is not discarded):

@example
export EMACSLOADPATH=:~/.emacs.d/lisp/pgqa/
@end example

@noindent
Then run GNU Emacs this way (query.sql is the file containing your SQL query):

@example
emacs -batch --insert query.sql -l pgqa.el -f pgqa-format-query-batch
@end example

@noindent
The formatted query should be sent to the standard output.
@bye
